@page "/clientes"
@inject HttpClient http
@inject NavigationManager navigation

<div class="header">
    <h1>Clientes</h1>
    <a class="btn-adicionar" href="/clientes/adicao">Adicionar</a>
</div>

<div class="form-container">
    <div class="form form-id">
        <label>ID</label>
        <input class="input-id" @bind="ID" />
    </div>

    <div class="form form-descricao">
        <label>Descrição</label>
        <input @bind="Info" />
    </div>

    <div class="form">
        <label title="Data de Nascimento Inicial">Data Nasc. Inicial</label>
        <input @bind="DataNascimentoInicial" type="date" />
    </div>

    <div class="form">
        <label title="Data de Nascimento Final">Data Nasc. Final</label>
        <input @bind="DataNascimentoFinal" type="date" />
        
    </div>
   
    <div>
        <button type="button" @onclick="Pesquisar" class="btn btn-primary mt-3">Pesquisar</button>
        <button type="button" @onclick="ReturnInitialized" class="btn btn-primary mt-3">Resetar</button>
    </div>

</div>

@if (Clientes is null) {
    <Reload />
}
else if (!Clientes.Any()) {
    <p>Não foram encontrados registros.</p>
}
else {
    <table>
        <thead>
            <th>ID</th>
            <th>Nome</th>
            <th>CPF</th>
            <th>Data de Nascimento</th>
        </thead>

        <tbody>
            @foreach (var cliente in Clientes) {
                <tr>
                    <td>
                        <a href="/clientes/edicao/@cliente.ID" class="link-info">
                            @cliente.ID
                        </a>
                    </td>
                    <td>@cliente.Nome</td>
                    <td>@cliente.CPF</td>
                    <td>@cliente.DataNascimento.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        <p class="fw-bold text-end">Total de registros: @Clientes.Count().FormatadoCount()</p>
    </div>
}

@code {
    public List<Cliente> Clientes { get; set; }

    int ID { get; set; }
    string Info { get; set; }
    DateTime DataNascimentoInicial { get; set; }
    DateTime DataNascimentoFinal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ResetarFiltros();
        await Pesquisar();
    }

    async Task Pesquisar()
    {
        try
        {
            var infoTratamento = string.IsNullOrEmpty(Info) ? "-": Info;
            var dataNascimentoInicial = DataNascimentoInicial.ToString("MM/dd/yyyy");
            var dataNascimentoFinal = DataNascimentoFinal.ToString("MM/dd/yyyy");
            var url = $"{navigation.BaseUri}api/clientes/GetClientes?id={ID}&info={infoTratamento}&dataNascimentoInicial={dataNascimentoInicial}&dataNascimentoFinal={dataNascimentoFinal}";
            Clientes = await http.GetFromJsonAsync<List<Cliente>>(url);
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }
    void ResetarFiltros()
    {
        ID = 0;
        Info = "";
        DataNascimentoInicial = DateTime.MinValue;
        DataNascimentoFinal = DateTime.MaxValue;

    }
    async Task ReturnInitialized()
    {
        ResetarFiltros();
        await Pesquisar();

    }

}
