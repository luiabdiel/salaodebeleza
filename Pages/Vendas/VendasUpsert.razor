@page "/vendas/adicao"
@page "/vendas/edicao/{id:int}"
@inject HttpClient http
@inject NavigationManager navigation
@inject IJSRuntime js

@if (Carregando())
{
    <Reload />
}
else
{
    <EditForm Model="Venda" OnValidSubmit="Valid">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h1>@Cabecalho()</h1>

        <section class="d-flex flex-wrap my-4">
            <h6 class="w-100 fw-bold">Dados Gerais</h6>

            <div class="mx-1 col-6">
                <label class="form-label">Cliente</label>
                <select @bind="Venda.ClienteID" class="form-select">
                    @foreach (var cliente in Clientes)
                    {
                        <option value="@cliente.ID">@cliente.Nome - @cliente.CPF</option>
                    }
                </select>
            </div>

            <div class="mx-1 col-2">
                <label class="form-label">Data do Agendamento</label>
                <input type="datetime-local" @bind="Venda.DataAgendamento" class="form-control" />
            </div>
            <div class="mx-1 col-2">
                <label class="form-label">Data da Emissão</label>
                <input type="date" @bind="Venda.DataEmissao" class="form-control" />
            </div>
        </section>

        <section class="my-4">
            <h6 class="w-100 fw-bold">Servicos</h6>

            <div class="d-flex flex-wrap form-vendas align-items-end">
                <div class="mx-1 col-6">
                    <label class="form-label">Servico</label>
                    <select @bind="ServicoIdAtual" class="form-select">
                        <option value="0">Selecione Um Produto ou Servico</option>
                        @foreach (var servico in Servicos.Where(prod => !Venda.Itens.Select(item => item.ServicoID).Contains(prod.ID)))
                        {
                            <option value="@servico.ID">@servico.Descricao - @servico.Preco.Formatado()</option>
                        }
                    </select>
                </div>

                <div class="mx-1 col-2">
                    <label class="form-label">Quantidade</label>
                    <input @bind="QuantidadeAtual" class="form-control" />
                </div>

                <div>
                    <button type="button" @onclick="AdicionarServico" class="btn btn-success">Adicionar</button>
                </div>
                <div class="mx-1 col-6 mt-3">
                    <label class="form-label">Selecione o tipo:</label>
                    <select required class="form-select form-select-sm" @bind="Venda.Status">
                        <option value="1">Agendado</option>
                        <option value="2">Em Andamento</option>
                        <option value="3">Finalizado</option>
                        <ValidationMessage For="(() => Venda.Status)" />
                    </select>
                </div>
            </div>

            @if (!Venda.Itens.Any())
            {
                <p>Não há itens lançados nesta venda.</p>
            }
            else
            {
                <table class="table mt-2">
                    <thead>
                    <th class="text-start">Servico</th>
                    <th class="text-end">Preço</th>
                    <th class="text-end">Valor Total</th>
                    </thead>
                    <tbody>
                        @foreach (var item in Venda.Itens)
                        {
                            <tr>
                                <td class="text-start">@item.Servico.Descricao</td>
                                <td class="text-end">@item.Preco.Formatado()</td>
                                <td class="text-end">@item.ValorTotal().Formatado()</td>
                                <td class="text-end">

                                    <button type="button" @onclick="(() => RemoverServico(item))" class="btn btn-danger">Remover</button>
                                </td>
                            </tr>
                            <div class="mx-1 col-6">
                                <label class="form-label">Novo Preço: @item.Servico.Descricao</label>
                                <input class="form-control input-preco" @bind="item.Preco"/>
                                <ValidationMessage For="(() => item.Preco)" />
                            </div>
                        }
                        
                    </tbody>
                </table>
               

                <div>
                    <span class="d-block fw-bold text-end">Total de @Venda.Itens.Sum(x => x.ValorTotal()).Formatado()</span>
                </div>
            }
        </section>

        <div class="mx-1 my-4">
            <button class="btn btn-success">Salvar</button>
            <a href="/vendas" class="btn btn-primary">Listagem</a>
            @if(!NovaVenda()){
                <button type="button" @onclick="Apagar" class="btn btn-danger">Apagar Venda</button>
            }
        </div>
    </EditForm>
}

@code {
    [Parameter] public int ID { get; set; }

    public Venda Venda { get; set; }
    public List<Cliente> Clientes { get; set; }

    public List<Servico> Servicos { get; set; }
    public int ServicoIdAtual { get; set; }
    public double QuantidadeAtual { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Clientes = await http.GetFromJsonAsync<List<Cliente>>($"{navigation.BaseUri}api/clientes");
        }
        catch (Exception ex)
        {

            throw ex;
        }

        try
        {
            Servicos = await http.GetFromJsonAsync<List<Servico>>($"{navigation.BaseUri}api/servicos/GetServicos");

        }
        catch (Exception ex)
        {

            throw ex;
        }
        try
        {

            Venda = NovaVenda() ? new() : await http.GetFromJsonAsync<Venda>($"{navigation.BaseUri}api/vendas/{ID}");
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    async Task Valid()
    {
        try
        {
            if (Venda.ID == 0)
            {
                var result = await http.PostAsJsonAsync($"{navigation.BaseUri}api/vendas", Venda);

                if (!result.IsSuccessStatusCode)
                {
                    throw new Exception(result.ReasonPhrase);
                }
                navigation.NavigateTo("/vendas");
            }
            else
            {
                var result = await http.PutAsJsonAsync($"{navigation.BaseUri}api/vendas/{Venda.ID}", Venda);

                if (!result.IsSuccessStatusCode)
                {
                    throw new Exception(result.ReasonPhrase);
                }
            }
            navigation.NavigateTo("/vendas");

        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    async Task AdicionarServico()
    {
        try
        {
            if (ServicoIdAtual == 0) throw new Exception("Selecione o produto/serviço");
            
            if (QuantidadeAtual == 0)
            {
                throw new Exception("Quantidade deve ser informada.");
            }

            var produtoSelecionado = Servicos.Find(prod => prod.ID == ServicoIdAtual);
            var item = new VendaItem(produtoSelecionado.Preco,ServicoIdAtual, QuantidadeAtual, produtoSelecionado);

            Venda.Itens.Add(item);

            ServicoIdAtual = 0;
            QuantidadeAtual = 0;
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    void RemoverServico(VendaItem item)
    {
        Venda.Itens.Remove(item);
    }

    string Cabecalho() =>
        NovaVenda() ? "Nova Venda" : $"Venda #{ID}";

    bool NovaVenda() => ID == 0;

    bool Carregando() =>
        Venda is null || Clientes is null || Servicos is null;

    async Task Apagar()
    {
        try
        {
            var result = await http.DeleteAsync($"{navigation.BaseUri}api/vendas/{Venda.ID}");

            if (!result.IsSuccessStatusCode)
            {
                throw new Exception(result.ReasonPhrase);
            }
            navigation.NavigateTo("/vendas");


        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", ex.Message);
        }
    }

}

